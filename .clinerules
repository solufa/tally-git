# プロジェクトの目的

Git管理されたローカルのディレクトリを静的に解析してそのプロジェクトの品質を評価したい。
開発者の生産性を比較したりソースコードの複雑さや保守性を計測することで、運用コストを減らしたり潜在的なバグの発見を目指す。
エンジニアではない経営陣に報告するため、美しい体裁と平易な表現で最終成果物のCSVやPDFを作成する必要がある。
経営陣はGit用語の「貢献者」という単語を使わないので、代わりに「開発者」を常に使用してください。

## メモリバンク

`.cline/memory.md`をメモリバンクとして利用する。作業開始前に必ず内容を確認する。

## コーディングルール

メモリバンクを確認した後、タスクの開始前に必ずeslint.config.tsを確認する。
作業前にESLintのルールを把握することは必須の手順である。
max-linesの修正は後回しにして良いが、それ以外のルールは常に守るように最善のコードを出力する。

tsファイルを変更したあとに `npm run fix:lint` コマンドでPrettierとESLintによる整形を実行する。

ライブラリに強制されない限り、クラスを使わず関数を使う。
ファイル読み書き以外に副作用のある処理を行ってはいけない。

letの使用は極力避ける。any型は使用禁止。
型アサーション（as キーワード）は使用禁止。代わりに型ガード関数や型述語（Type Predicates）を使用する。

配列操作には組み込みメソッドを使う。
非同期処理を直列に実行したい場合以外にfor文を使わない。

他のファイルから参照されてない型や変数をexportしない。

デフォルト引数はESLintの複雑度計測対象に含まれているので、エラーを回避するため極力使用しない。

## ファイル構造と設計

ファイルサイズの制限（200行）を守るために、関数を適切に分割する。
関連する機能は同じファイルにまとめ、ファイルが大きくなる場合は機能ごとに分割する。

共通で使用される型は型定義ファイル（types.ts）に集約し、必要な場所でインポートする。
ユーティリティ関数は適切なファイルに配置し、再利用可能にする。

関数名は目的を明確に表し、引数と戻り値の型を明示する。
関数は単一責任の原則に従い、一つの関数は一つの責務のみを持つようにする。

既存のテストを壊さないよう、出力形式やAPIの互換性を維持する。
変更を加える前に、既存のテストを実行して動作を確認する。

## タスクのリセットルール

コンテキストウィンドウを半分以上消費したら、これまでの作業を要約しメモリバンクに記録する。
メモリバンクは `.cline/memory.md` にマークダウンで記述する。
メモリバンクを更新するとユーザーはセッションを新規に開始する。
その際にこれまでのタスクの記憶がリセットされるが、メモリバンクを参照することで直前のセッションの状態を思い出すことができる。

## .clinerulesのメンテナンス

タスク作業中に発見したルールは `.clinerules` に記録する。
より自分が理解しやすい表現がある場合は既存のルールの表現を変更して良い。

## コメントルール

以下のようなコメントは記述しない：
- 変数名や関数名から明らかな処理内容の説明
- コードを日本語や英語に翻訳しただけのコメント
- 「〜を作成する」「〜を処理する」など単純な動作説明

コメントは以下の場合にのみ記述する：
- 実装の背景や選択した手法の理由
- 非自明なアルゴリズムや最適化の説明
- 将来的な注意点や既知の制約
- 外部APIや仕様に関する重要な情報

変数名や関数名で意図を明確に表現し、コードの自己説明性を高める努力を優先する。

### テストと検証コマンド

- `npm run fix:lint` - ESLintとPrettierによるコード整形（変更後に必ず実行）
- `npm test` - テストの実行（変更が既存の機能を壊していないか確認）
- `npm start` - プロジェクトの実行（CSV/PDF生成の確認）
