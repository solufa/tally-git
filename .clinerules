## メモリバンク

`.cline/memory.md`をメモリバンクとして利用する。作業開始前に必ず内容を確認する。

## コーディングルール

メモリバンクを確認した後、タスクの開始前に必ずeslint.config.tsを確認する。
ルールを常に守るように最善のコードを出力しなければならない。
ルールが厳しいため、Lintエラーの修正を後回しにすると過剰にトークンを消費することになってしまう。

tsファイルを変更したあとに `npm run fix:lint` コマンドでPrettierとESLintによる整形を実行する。
整形をしないとCIをパスできない。また、ESLintのエラーに影響を与えることもある。

ライブラリに強制されない限り、クラスを使わず関数を使う。
ファイル読み書き以外に副作用のある処理を行ってはいけない。

letの使用は極力避ける。any型は使用禁止。
型アサーション（as キーワード）は使用禁止。代わりに型ガード関数や型述語（Type Predicates）を使用する。

配列操作には組み込みメソッドを使う。
非同期処理を直列に実行したい場合以外にfor文を使わない。

他のファイルから参照されてない型や変数をexportしない。

## タスクのリセットルール

コンテキストウィンドウを半分以上消費したら、これまでの作業を要約しメモリバンクに記録する。
メモリバンクは `.cline/memory.md` にマークダウンで記述する。
メモリバンクを更新するとユーザーはセッションを新規に開始する。
その際にこれまでのタスクの記憶がリセットされるが、メモリバンクを参照することで直前のセッションの状態を思い出すことができる。

## .clinerulesのメンテナンス

タスク作業中に発見したルールは `.clinerules` に記録する。
より自分が理解しやすい表現がある場合は既存のルールの表現を変更して良い。

## コメントルール

内容を説明するだけのコメントは記述しない。変数名や関数名で説明する努力を行う。
それでも実装の背景や理由をコードから読み取りにくい場合にコメントで説明する。
