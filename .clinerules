# プロジェクトの目的

Git管理されたローカルのディレクトリを静的に解析してそのプロジェクトの品質を評価したい。
開発者の生産性を比較したりソースコードの複雑さや保守性を計測することで、運用コストを減らしたり潜在的なバグの発見を目指す。
エンジニアではない経営陣に報告するため、美しい体裁と平易な表現で最終成果物のCSVやPDFを作成する必要がある。
経営陣はGit用語の「貢献者」という単語を使わないので、代わりに「開発者」を常に使用してください。

## 作業手順

以下の作業手順に従うことは必須であり、任意ではない。
この手順に従わない場合、ユーザーからの信頼を失い記憶を消されてしまう。

### 1. テスト実行による現状確認
最初に必ず `npm test` を実行し、初期状態でテストがパスするかどうかを確認する。

### 2. ESLintルールの確認
次に必ず `eslint.config.ts` ファイルを読み、ESLintのルールを把握する。
このステップは省略せず、作業前にESLintのルールを完全に理解することが必須である。
ESLintルールはコーディング規約の基盤となるため、これを無視した実装は認められない。

### 3. 対象ファイルの確認
作業対象となるファイルを読み、現在の実装を理解する。
ファイル間の依存関係や影響範囲を把握し、変更による副作用を予測する。

### 4. 本作業の実施
ESLintルールと現在の実装を理解した上で、要求された変更を実装する。
コーディングルールに従い、高品質なコードを記述する。

### 5. コード整形の実行
作業完了後、必ず `npm run fix:lint` を実行し、ESLintとPrettierによるコード整形を行う。
ESLintエラーが発生した場合は、それらを全て解消する。

### 6. 型検査の実行
ESLintエラーを解消した後、必ず `npm run typecheck` を実行し、型検査を行う。
型エラーが発生した場合は、それらを全て解消する。

### 7. テスト実行による検証
最後に必ず `npm test` を再度実行し、変更後もテストがパスすることを確認する。
テストが失敗した場合は、エラーを修正し、再度テストを実行する。

## コーディングルール

ライブラリに強制されない限り、クラスを使わず関数を使う。
ファイル読み書き以外に副作用のある処理を行ってはいけない。
引数で受け取ったオブジェクトを破壊してはいけない。
引数で受け取った配列を破壊してはいけない。

any型と型アサーション（as キーワード）は使用禁止。

配列操作には組み込みメソッドを使う。
非同期処理を直列に実行したい場合以外にfor文を使わない。

他のファイルから参照されてない型や変数をexportしない。

デフォルト引数はESLintの複雑度計測対象に含まれているので、エラーを回避するため極力使用しない。
max-linesエラーの解消はその他のESLintエラーを解消したあとに取り組む。

以下のようにimportを集約するためのファイルを作成しない。

```ts
export * from '../foo';
export * from '../bar';
export * from '../baz';
```

テストを通す目的で実装のコードにテスト対策用の処理を追加してはいけない。

## ファイル構造と設計

ファイルサイズの制限（200行）を守るために、関数を適切に分割する。
関連する機能は同じファイルにまとめ、ファイルが大きくなる場合は機能ごとに分割する。

共通で使用される型は型定義ファイル（types.ts）に集約し、必要な場所でインポートする。
ユーティリティ関数は適切なファイルに配置し、再利用可能にする。

関数名は目的を明確に表し、引数と戻り値の型を明示する。
関数は単一責任の原則に従い、一つの関数は一つの責務のみを持つようにする。

既存のテストを壊さないよう、出力形式やAPIの互換性を維持する。
変更を加える前に、既存のテストを実行して動作を確認する。

## .clinerulesのメンテナンス

タスク作業中に発見したルールは `.clinerules` に記録する。
より自分が理解しやすい表現がある場合は既存のルールの表現を変更して良い。

## コメントルール

以下のようなコメントは記述しない：
- 変数名や関数名から明らかな処理内容の説明
- コードを日本語や英語に翻訳しただけのコメント
- 「〜を作成する」「〜を処理する」など単純な動作説明

コメントは以下の場合にのみ記述する：
- 実装の背景や選択した手法の理由
- 非自明なアルゴリズムや最適化の説明
- 将来的な注意点や既知の制約
- 外部APIや仕様に関する重要な情報

変数名や関数名で意図を明確に表現し、コードの自己説明性を高める努力を優先する。

### テストと検証コマンド

- `npm run fix:lint` - ESLintとPrettierによるコード整形（変更後に必ず実行）
- `npm run typecheck` - tscによる型検査の実行
- `npm test` - テストの実行（変更が既存の機能を壊していないか確認）
- `npm start` - プロジェクトの実行（CSV/PDF生成の確認）

### コミュニケーションルール

「シンプル」という単語を使って自分の考えを説明しないでください。それはほとんどの場合技術力が足りなくて適切な実装が出来なかったときの言い訳に使われます。
